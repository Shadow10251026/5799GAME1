<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>贪吃猫 - 可选样式</title>
  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      background-color: #ffffff;
      color: rgb(0, 0, 0);
      display: flex;
      flex-direction: column;
      align-items: center;

    }

   

    h{
      color: #9b82b0;
      font-size: 40px;
    }

    span{
      font-size: 20px;
    }

    br{
      white-space: 0px;
      margin: 2
    }

    p1{
      font-size: 10px;
      color: rgb(151, 134, 219);
    }
    p3{
      color: #ffffff;
    }

    

    .top-bar {
      display: flex;
      align-items: center;
      width: 100%;
      padding: 10px;
      background-color: #222;
    }

    #menuToggle {
      font-size: 40px;
      background: none;
      color: rgb(255, 255, 255);
      border: none;
      cursor: pointer;
    }

    .style-menu {
      display: flex;
      gap: 20px;
      background-color: #cebcdd;
      padding: 10px;
      border-radius: 8px;
      margin: 10px 0;
    }

    .style-menu.hidden {
      display: none;
    }

    .skins {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .skin {
      width: 40px;
      height: 40px;
      object-fit: cover;
      cursor: pointer;
      border: 2px solid transparent;
      border-radius: 5px;
    }

    .skin.selected {
      border-color: rgb(251, 251, 155);
    }

    canvas {
      background-color: #000000;
      margin: 20px 0;
      display: block;
    }

    #gameOver {
      display: none;
      color: rgb(133, 4, 4);
      font-size: 24px;
      margin-top: 10px;
      cursor: pointer;
    }

    #score {
      font-size: 20px;
    }
  </style>
</head>
<body>
  <div class="top-bar">
    <button id="menuToggle">☰</button>
  </div>

  
  <div style="
  display: grid;
  grid-template-columns: auto 1px auto;
  align-items: start;
  gap: 10px;
  padding-top: 20px;
  padding-bottom: 20px;
  color: #9b82b0;
  text-align: center;
  padding-right: 80px;

">
  <!-- 左侧文字（右对齐） -->
  <div style="text-align: right;">
    5799小游戏<br>
    雯淇妈妈的小厨房<br><p1>之</p1><br>甜品站
  </div>
  <!-- 竖线 -->
  <div style="background: rgb(151, 134, 219); width: 2px; height: 100%;"></div>
  <!-- 右侧文字 -->
  <div>
     <span> 贪</span>  
     <br>
     <span> 吃</span> 
     <br>
     <span>猫</span>
    </div>
 
    </div>
  </div>
</div>
  



  <div id="styleMenu" class="style-menu hidden">
    <div class="skin-options">
      <p>选择猫猫头样式：</p>
      <div class="skins">
        <img src="../gif/椰奶.gif" class="skin" data-skin="../gif/椰奶.gif">
        <img src="../gif/土豆跑酷.gif" class="skin" data-skin="../gif/土豆跑酷.gif">
        
      </div>
    </div>

    <div class="color-picker">
      <p>选择猫猫尾颜色：</p>
      <input type="color" id="tailColor" value="#FFFFFF" >
      <p>选择食物颜色：</p>
      <input type="color" id="foodColor" value="#FFFFFF">
    </div>

    <div class="food-options">
      <p>选择食物样式：</p>
      <div class="skins">
        <img src="../gif/椰奶.gif" class="skin" data-food="../gif/椰奶.gif">
        <img src="../gif/土豆跑酷.gif" class="skin" data-food="../gif/土豆跑酷.gif">
        <img src="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.25.png" class="skin" data-food="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.25.png">
        <img src="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.28.png" class="skin" data-food="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.28.png">
        <img src="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.31.png" class="skin" data-food="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.31.png">
        <img src="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.33.png" class="skin" data-food="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.33.png">
        <img src="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.36.png" class="skin" data-food="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.36.png">
        <img src="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.39.png" class="skin" data-food="../拼图｜图/食物图片 （贪吃猫）/截屏2025-06-10 13.54.39.png">

      </div>
    </div>
  </div>

  <div id="score">得分: 0</div>
  <canvas id="gameCanvas" width="900" height="500"></canvas>
  <div id="gameOver">点击重新开始</div>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const scoreDisplay = document.getElementById('score');
    const gameOverDisplay = document.getElementById('gameOver');

    const snakeSize = 20;
    let snake = [{ x: 160, y: 160 }];
    let direction = 'RIGHT';
    let food = {};
    let score = 0;
    let gameInterval;
    let selectedSkin = null;
    let selectedFood = null;
    let headImage = null;
    let foodImage = null;
    let headImageLoaded = false;
    let foodImageLoaded = false;

    let tailColor = '#FFFFFF'; // 默认白色尾巴
    let foodColor = '#FFFFFF'; // 默认白色食物

    function generateFood() {
      const maxX = (canvas.width / snakeSize) - 2;
      const maxY = (canvas.height / snakeSize) - 2;
      const min = 1;
      const x = Math.floor(Math.random() * (maxX - min + 1) + min) * snakeSize;
      const y = Math.floor(Math.random() * (maxY - min + 1) + min) * snakeSize;
      food = { x, y };
    }

    function drawSnake() {
  const tailLength = snake.length;
  snake.forEach((segment, index) => {
    if (index === 0) {
      // 蛇头
      if (headImage && headImageLoaded) {
        ctx.drawImage(headImage, segment.x, segment.y, snakeSize, snakeSize);
      } else {
        ctx.fillStyle = tailColor;
        ctx.fillRect(segment.x, segment.y, snakeSize, snakeSize);
      }
    } else {
      const ratio = 1 - index / tailLength;
      const radius = snakeSize * 0.5 * ratio + 2; // 越靠近尾部越小，最小半径为2
      const alpha = 0.2 + 0.6 * ratio; // 越靠近尾部越透明，范围0.2~0.8

      ctx.beginPath();
      ctx.fillStyle = hexToRgba(tailColor, alpha);
      ctx.arc(segment.x + snakeSize / 2, segment.y + snakeSize / 2, radius, 0, Math.PI * 2);
      ctx.fill();
      ctx.closePath();
    }
  });
}

// 辅助函数：HEX 转 RGBA
function hexToRgba(hex, alpha) {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}


    function drawFood() {
      if (foodImage && foodImageLoaded) {
        ctx.drawImage(foodImage, food.x, food.y, snakeSize, snakeSize);
      } else {
        ctx.fillStyle = foodColor;
        ctx.fillRect(food.x, food.y, snakeSize, snakeSize);
      }
    }

    function updateScore() {
      scoreDisplay.textContent = `得分: ${score}`;
    }

    function updateGame() {
      const head = { ...snake[0] };

      if (direction === 'UP') head.y -= snakeSize;
      if (direction === 'DOWN') head.y += snakeSize;
      if (direction === 'LEFT') head.x -= snakeSize;
      if (direction === 'RIGHT') head.x += snakeSize;

      if (head.x < 0 || head.x >= canvas.width || head.y < 0 || head.y >= canvas.height) {
        gameOver();
        return;
      }

      snake.unshift(head);

      if (head.x === food.x && head.y === food.y) {
        score++;
        updateScore();
        generateFood();
      } else {
        snake.pop();
      }

      draw();
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawSnake();
      drawFood();
    }

    function collision(head) {
      return snake.some((segment, index) => index !== 0 && segment.x === head.x && segment.y === head.y);
    }

    function gameOver() {
      clearInterval(gameInterval);
      gameOverDisplay.style.display = 'block';
    }

    function restartGame() {
      snake = [{ x: 160, y: 160 }];
      direction = 'RIGHT';
      score = 0;
      updateScore();
      gameOverDisplay.style.display = 'none';
      generateFood();

      // 加载蛇头图像
      if (selectedSkin) {
        headImage = new Image();
        headImage.onload = () => {
          headImageLoaded = true;
          draw(); // 初始时更新画面
        };
        headImage.onerror = () => {
          console.error('图片加载失败：' + selectedSkin);
        };
        headImage.src = selectedSkin;
      }

      // 加载食物图像
      if (selectedFood) {
        foodImage = new Image();
        foodImage.onload = () => {
          foodImageLoaded = true;
          draw(); // 初始时更新画面
        };
        foodImage.onerror = () => {
          console.error('图片加载失败：' + selectedFood);
        };
        foodImage.src = selectedFood;
      }

      gameInterval = setInterval(updateGame, 150);
    }

    function changeDirection(event) {
      const key = event.key;
      if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"].includes(key)) {
        event.preventDefault();
      }

      if (key === 'ArrowUp' && direction !== 'DOWN') direction = 'UP';
      else if (key === 'ArrowDown' && direction !== 'UP') direction = 'DOWN';
      else if (key === 'ArrowLeft' && direction !== 'RIGHT') direction = 'LEFT';
      else if (key === 'ArrowRight' && direction !== 'LEFT') direction = 'RIGHT';
    }

    document.addEventListener('keydown', changeDirection);
    gameOverDisplay.addEventListener('click', restartGame);

    document.getElementById('menuToggle').addEventListener('click', () => {
      document.getElementById('styleMenu').classList.toggle('hidden');
    });

    document.querySelectorAll('.skin').forEach(img => {
      img.addEventListener('click', () => {
        document.querySelectorAll('.skin').forEach(i => i.classList.remove('selected'));
        img.classList.add('selected');
        selectedSkin = img.dataset.skin;

        // 根据不同的蛇头选择更改尾巴和食物颜色
        if (selectedSkin.includes("椰奶")) {
          tailColor = '#FFFFFF'; // 白色尾巴
          foodColor = '#FFFFFF'; // 白色食物
        } else if (selectedSkin.includes("Snake2")) {
          tailColor = '#FF5733'; // 红色尾巴
          foodColor = '#FF5733'; // 红色食物
        } else if (selectedSkin.includes("Snake3")) {
          tailColor = '#33FF57'; // 绿色尾巴
          foodColor = '#33FF57'; // 绿色食物
        } else if (selectedSkin.includes("Snake4")) {
          tailColor = '#3357FF'; // 蓝色尾巴
          foodColor = '#3357FF'; // 蓝色食物
        }

        // 重置图片加载状态
        headImageLoaded = false;
        headImage = new Image();
        headImage.onload = () => {
          headImageLoaded = true;
          draw(); // 确保加载成功后重新绘制
        };
        headImage.onerror = () => {
          console.error('图片加载失败：' + selectedSkin);
        };
        headImage.src = selectedSkin;
      });
    });

    // 更新颜色选择
    document.getElementById('tailColor').addEventListener('input', (e) => {
      tailColor = e.target.value;
    });

    document.getElementById('foodColor').addEventListener('input', (e) => {
      foodColor = e.target.value;
    });

    // 选择食物样式
    document.querySelectorAll('.food-options .skin').forEach(img => {
      img.addEventListener('click', () => {
        document.querySelectorAll('.food-options .skin').forEach(i => i.classList.remove('selected'));
        img.classList.add('selected');
        selectedFood = img.dataset.food;

        // 更新食物样式
        foodImageLoaded = false;
        foodImage = new Image();
        foodImage.onload = () => {
          foodImageLoaded = true;
          draw(); // 确保加载成功后重新绘制
        };
        foodImage.onerror = () => {
          console.error('图片加载失败：' + selectedFood);
        };
        foodImage.src = selectedFood;
      });
    });

    generateFood();
    gameInterval = setInterval(updateGame, 150);
  </script>
</body>
</html>
